//////////////////////////////
// Sprite Module Mixins
//////////////////////////////

/// https://github.com/liquidlight/sass-gulp-svg-sprite/blob/master/build/sass/_mixins.scss
/// Add a sprite PNG icon for browsers with the `$ieSprite` class with px for positioning
/// @param {string} $icon - The name of the icon
/// @param {string} $type [all] - The properties wanted (can be `all`, `size` or `bg`).
/// - `all` ensures the icon has the background, position and size.
/// - `size` is just for dimensions
/// - `bg` just  applies the backgrounds to an element
/// @example scss - Usage
/// .class {
/// 	@include ie-sprite(arrow);
/// 	&:hover {
/// 		@include ie-sprite(arrowDown, bg)
/// 	}
/// }
///
/// @example css - Output
/// .lt-ie9 .class {
///     background-image: url("../img/sprite.png");
/// }
/// .lt-ie9 .class {
///     width: 20px;
///     height: 20px;
///     background-position: -5px -5px;
/// }
/// .lt-ie9 .class:hover {
///     background-position: -36px -36px;
/// }
@mixin ie-sprite($icon, $type: all) {
	$iconMap: icon-attr($icon);

	@include jacket(svg) {
		 & {
			@if $type == all {
				// Shares the PNG background
				@extend %ie-sprite;
			}
			// Outputs dimensions of icon
			@if $type == all or $type == size {
				width: map-get($iconMap, width);
				height: map-get($iconMap, height);
			}
			// Outputs background position
			@if $type == all or $type == bg {
				background-position: (map-get($iconMap, x)) (map-get($iconMap, y));
			}
		}
	}
}

/// Add an SVG sprite icon using em positioning, with a PNG icon for browsers with the `$ieSprite` class using px positioning
/// @param {string} $icon - The name of the icon
/// @param {string} $type [all] - The properties wanted (can be `all`, `size` or `bg`).
/// - `all` ensures the icon has the background, position and size.
/// - `size` is just for dimensions
/// - `bg` just  applies the backgrounds to an element
/// @example scss - Usage
/// .class {
/// 	@include sprite(arrow);
/// 	&:hover {
/// 		@include sprite(arrowDown, bg)
/// 	}
/// }
///
/// @example css - Output
/// .class {
/// 	display: inline-block;
/// 	background-image: url("../img/sprite.svg");
/// 	background-size: 34.25em 32.1875em;
/// }
///
/// .lt-ie9 .class {
/// 	background-image: url("../img/sprite.png");
/// }
///
/// .class {
/// 	width: 1.3125em;
/// 	height: 1.3125em;
/// 	background-position: -0.3125em -0.3125em;
/// }
/// .lt-ie9 .class {
/// 	width: 20px;
/// 	height: 20px;
/// 	background-position: -5px -5px;
/// }
/// .class:hover {
/// 	background-position: -2.25em -2.25em;
/// }
/// .lt-ie9 .class:hover {
/// 	background-position: -36px -36px;
/// }
@mixin sprite($icon, $type: all) {
	&:before {
		@if $type == all {
			// Shares the backgrounds
			@extend %sprite;
			//Set some sensible defaults
			content: "";
			display: inline-block;
			font-size: 16px;
		}
		$iconMap: icon-attr($icon);

		// Outputs dimensions in em
		@if $type == all or $type == size {
			width: rem-calc(map-get($iconMap, width) + 1);
			height: rem-calc(map-get($iconMap, height) + 1);
		}

		// Outputs background position in em
		@if $type == all or $type == bg {
			background-position: rem-calc(map-get($iconMap, x)) rem-calc(map-get($iconMap, y));
		}

		// Add ie fallback
		@include ie-sprite($icon, $type);
	}
}
